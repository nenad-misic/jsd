var sqlite3 = require('sqlite3');
var open = require('sqlite').open;

let formatAdvancedQuery = (filter, sort, sortDirection, page, pageSize) => {
    let query = 'SELECT * FROM {{entity.name}}'
    query += `${filter?` WHERE ${Object.keys(filter).map(key => `${key} ${typeof(filter[key]) == typeof('')?`LIKE "%${filter[key]}%"`:`= ${filter[key]}`}`).join(' AND ')}`:''}`
    query += `${sort?` ORDER BY ${sort} COLLATE NOCASE ${sortDirection == 'DESC'?'DESC' : 'ASC'}`:''}`

    limit = pageSize
    offset = pageSize * page
    query += ` LIMIT ${limit} OFFSET ${offset}`

    query += ';'
    return query
}

var repository = {
    create: async (entity) => {
        // Inserts entity in db table, id should be missing and autogenerated
        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });

        let result = await db.run('INSERT INTO {{entity.name}} ({% for property in (entity|propsExceptPk) %} {{property.name}}{% if not loop.last %},{% endif %}{% endfor %} ) VALUES ({% for property in (entity|propsExceptPk) %} @{{property.name}}{% if not loop.last %},{% endif %}{% endfor %} )',
            { {% for property in (entity|propsExceptPk) %} '@{{property.name}}': entity.{{property.name}}{% if not loop.last %},{% endif %}{% endfor %}});

        await db.close();
        return result;
    },
    update: async (entity) => {
        // Updates entity of given id in db table
        // TODO: check if entity exists

        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });

        let result = await db.run('UPDATE {{entity.name}} SET ({% for property in (entity|propsExceptPk) %} {{property.name}} = @{{property.name}}{% if not loop.last %},{% endif %}{% endfor %} ) WHERE {{(entity|primaryKeyProp).name}} = @{{(entity|primaryKeyProp).name}}',
            { {% for property in (entity|propsExceptPk) %} '@{{property.name}}': entity.{{property.name}},{% endfor %} '@{{(entity|primaryKeyProp).name}}': entity.{{(entity|primaryKeyProp).name}} });

        await db.close();
        return result;
    },
    delete: async (id) => {
        // Deletes entity of given id from db table
        // TODO: check if entity exists

        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });

        let result = await db.run('DELETE FROM {{entity.name}} WHERE {{(entity|primaryKeyProp).name}} = @{{(entity|primaryKeyProp).name}}',
            { '@{{(entity|primaryKeyProp).name}}': {{(entity|primaryKeyProp).name}} });

        await db.close();
        return result;
    },
    exists: async (id) => {
        // Returns True if entity with given id exists in db table, false otherwise
        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });

        const stmt = await db.prepare('SELECT * FROM {{entity.name}} WHERE {{(entity|primaryKeyProp).name}} = @{{(entity|primaryKeyProp).name}}',
            { '@{{(entity|primaryKeyProp).name}}': {{(entity|primaryKeyProp).name}} });

        let result = await stmt.get();
        await stmt.finalize();

        await db.close();
        return result != null;
    },
    count: async () => {
        // Returns total number of entities in db table
        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });

        const stmt = await db.prepare('SELECT * FROM {{entity.name}}');

        let result = await stmt.all();
        await stmt.finalize();

        await db.close();
        return result.length;
    },
    findById: async (id) => {
        // Returns entity with given id from db table, null if not existent
        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });

        const stmt = await db.prepare('SELECT * FROM {{entity.name}} WHERE {{(entity|primaryKeyProp).name}} = @{{(entity|primaryKeyProp).name}}', { '@{{(entity|primaryKeyProp).name}}': {{(entity|primaryKeyProp).name}} });

        let result = await stmt.get();
        await stmt.finalize();

        await db.close()
        return result;
    },
    getAll: async () => {
        // Returns all entites from db table
        const db = await open({
            filename: '../database.db',
            driver: sqlite3.Database
        });
        const stmt = await db.prepare('SELECT * FROM {{entity.name}}');


        let result = await stmt.all();
        await stmt.finalize();

        await db.close()
        return result;
    },
}

module.exports = repository;