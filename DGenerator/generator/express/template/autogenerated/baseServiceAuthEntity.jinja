// Autogenerated from {{model_filename}} file
// Created at {{timestamp|strftime}}

var repositories = require('../../repositories')

var service = {
    create: (entity) => {
        // Validates entity and passes it to repository if valid. Throws exception if not valid >>> throw new Error('Error description');
        // TODO - validation

        return repositories.{{entity.name|lower}}_repository.create(entity);
    },
    update: (entity) => {
        // Validates entity and passes it to repository if valid. Throws exception if not valid >>> throw new Error('Error description');
        // TODO - validation
        if (!entity.id)
            throw new Error('ID cannot be null or undefined')

        return repositories.{{entity.name|lower}}_repository.update(entity);
    },
    delete: (id) => {
        // Validates id and passes it to repository if valid. Throws exception if not valid >>> throw new Error('Error description');
        // TODO - validation
        if (!id)
            throw new Error('ID cannot be null or undefined');

        return repositories.{{entity.name|lower}}_repository.delete(id);
    },
    exists: (id) => {
        // Validates id and passes it to repository if valid. Throws exception if not valid >>> throw new Error('Error description');
        // TODO - validation
        if (!id)
            throw new Error('ID cannot be null or undefined');

        return repositories.{{entity.name|lower}}_repository.exists(id);
    },
    count: () => {
        // Delegates to repository.
        return repositories.{{entity.name|lower}}_repository.count();
    },
    findById: (id) => {
        // Validates id and passes it to repository if valid. Throws exception if not valid >>> throw new Error('Error description');
        // TODO - validation
        if (!id)
            throw new Error('ID cannot be null or undefined');

        return repositories.{{entity.name|lower}}_repository.findById(id);
    },
    getAll: () => {
        // Delegates to repository.
        return repositories.{{entity.name|lower}}_repository.getAll();
    },
    findByUsernameField: (username) => {
        if (!username)
            throw new Error('USERNAME cannot be null or undefined');

        return repositories.{{entity.name|lower}}_repository.findByUsernameField(username);
    
    },
}

module.exports = service;
