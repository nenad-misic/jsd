import React, { useState } from "react";
import { Button, FormGroup, FormControl } from "react-bootstrap";
import authService from '../Services/authentication/AuthService';
import {{entity.name|lowercase}}Service from '../Services/{{entity.name|lowercase}}_service'
import { useHistory } from "react-router-dom";
import toast from "../Shared/Toast";

export default function Register() {
  let history = useHistory()
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
{% for field in entity|propsExceptPk %}
  {% if field.name != application.authObject.usernameProp and field.name != application.authObject.passwordProp %}
  const [{{field.name|lowercase}}, set{{field.name}}] = useState("");
  {% endif %}
{% endfor %}

  function validateForm() {
    return username.length > 0 && password.length > 0;
  }

  async function handleSubmit(event) {
    event.preventDefault();
    let user = await {{entity.name|lowercase}}Service.create({
      {% for field in entity|propsExceptPk %}
      {% if field.name != application.authObject.usernameProp and field.name != application.authObject.passwordProp %}
      {{field.name|lowercase}},
      {% endif %}
      {% if field.name == application.authObject.usernameProp %}
      {{field.name|lowercase}}: username,
      {% endif %}
      {% if field.name == application.authObject.passwordProp %}
      {{field.name|lowercase}}: password,
      {% endif %}
      {% endfor %}
    })
    if (user.data)
    {
      history.push('/');
    } else {
        toast.error("Registration failed.")
    }
  }

 

  return (
    <div className="Login">
      <form onSubmit={handleSubmit} className="my-4">

      {% for field in entity|propsExceptPk %}

      {% if field.name == application.authObject.usernameProp %}
        <FormGroup className="col-4 offset-4 my-1" controlId="username" bssize="large">
          <label>{{application.authObject.usernameProp|firstUppercase|replace_}}</label>
          <FormControl
            autoFocus
            type="username"
            value={username}
            onChange={e => setUsername(e.target.value)}
          />
        </FormGroup>
      {% endif %}

      {% if field.name == application.authObject.passwordProp %}
        <FormGroup className="col-4 offset-4 my-1" controlId="password" bssize="large">
          <label>{{application.authObject.passwordProp|firstUppercase|replace_}}</label>
          <FormControl
            value={password}
            onChange={e => setPassword(e.target.value)}
            type="password"
          />
        </FormGroup>
      {% endif %}

      {% if field.name != application.authObject.usernameProp and field.name != application.authObject.passwordProp %}
        <FormGroup className="col-4 offset-4 my-1" controlId="{{field.name}}" bssize="large">
          <label>{{field.name|firstUppercase|replace_}}</label>
          <FormControl
            type="text"
            value={ {{field.name}} }
            onChange={e => set{{field.name}}(e.target.value)}
          />
        </FormGroup>
      {% endif %}
      {% endfor %}
        
        
        {# <FormGroup controlId="exampleForm.ControlSelect1" id="roleSelect" onChange={e => setRole(e.target.value)}>
            <label>Role</label>
            <FormControl as="select">
                <option>Student</option>
                <option>Professor</option>
            </FormControl>
        </FormGroup> #}

        <Button className="my-4 col-2 offset-5" block bssize="large" disabled={!validateForm()} type="submit">
          Register
        </Button>

      </form>
    </div>
  );
}
