import axios from 'axios';
import jwt from 'jwt-decode';
import {api} from '../../Environment/environment';

var bearer = () => { return {
    headers: { Authorization: `Bearer ${localStorage.getItem('user-token')}` }
}}

let authService = {
    get: (url) => {
        return axios.get(url, bearer());
    },
    post: (url, entity) => {
        return axios.post(url, entity, bearer());
    },
    put: (url, entity) => {
        return axios.put(url, entity, bearer());
    },
    delete: (url) => {
        return axios.delete(url, bearer());
    },
    login: async function (username, password) {
        let url = `${api}{{application.authObject.userEntity|lowercase}}/login`;
        try {
            let access_token = await axios.post(url, { {{application.authObject.usernameProp}}: username, {{application.authObject.passwordProp}}: password});
            if (access_token.data && access_token.data.token)  {
                localStorage.setItem('user-token', access_token.data.token);
                localStorage.setItem('identity', JSON.stringify(jwt(access_token.data.token)));
                localStorage.setItem('expires', 2606237994242);
                this.onChange(1);
                return true;
            }
        } catch(err) {
            return false;
        }
    },

    logout: function () {
        localStorage.removeItem('user-token');
        localStorage.removeItem('identity');
        localStorage.removeItem('expires');
        this.onChange(0);
    },
    onChange: function (v) {}
};

export default authService;
