// Autogenerated from {{model_filename}} file
// Created at {{timestamp|strftime}}

var express = require('express')
var services = require('../../services')
var environment = require('../../environment/environment')
const jwt = require('jsonwebtoken');

var bcrypt = require('bcryptjs');
var salt = bcrypt.genSaltSync(10);


var router = express.Router()

// Get all entities
router.get('/', async function (req, res, next) {
    let {{entity.name|lower}}Entities = await services.{{entity.name|lower}}_service.getAll(req.query).catch(next);
    res.status(200).json({{entity.name|lower}}Entities);
});

// Exists by id (request.params.id)
router.get('/exists/:id', async function (req, res, next) {
    let exists = await services.{{entity.name|lower}}_service.exists(req.params.id).catch(next);

    if (!exists){
        next(new Error('{{entity.name}} with id ' + req.params.id + ' doesn\'t exist'));
    }
    res.status(200).json({ exists });
});

// Get entity count
router.get('/count', async function (req, res, next) {
    let count = await services.{{entity.name|lower}}_service.count().catch(next);

    res.status(200).json({ count: count });
});

// Delete by id (request.params.id)
router.delete('/:id', async function (req, res, next) {
    let result = await services.{{entity.name|lower}}_service.delete(req.params.id).catch(next);

    res.status(200).json(result);
});

// Find by id (request.params.id)
router.get('/:id', async function (req, res, next) {
    let {{entity.name|lower}} = await services.{{entity.name|lower}}_service.findById(req.params.id).catch(next);

    res.status(200).json({{entity.name|lower}});
});

// Create new
router.post('/', async function (req, res, next) {
    var hash = bcrypt.hashSync(req.body.{{entity._password}}, salt)
    req.body.{{entity._password}} = hash
    let result = await services.{{entity.name|lower}}_service.create(req.body).catch(next);

    res.status(201).json(result);
});

// Update existing
router.put('/', async function (req, res, next) {
    let result = await services.{{entity.name|lower}}_service.update(req.body).catch(next);

    res.status(200).json(result);
});

router.post('/login', async function (req, res, next) {
    let creds = req.body;
    let user = await services.{{entity.name|lower}}_service.findByUsernameField(creds.{{entity._username}}).catch(next);

    if (!user ){
        next(new Error('Invalid credentials'));
        return;
    }
    
    let valid = await bcrypt.compare(creds.{{entity._password}}, user.{{entity._password}}).catch(next);
    if (!valid){
        next(new Error('Invalid password'));
        return;
    }


    delete user.{{entity._password}};

    const token = jwt.sign(user, environment.secret_key);

    res.status(200).json({ token });
});


module.exports = router;